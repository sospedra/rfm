{"version":3,"sources":["rfm/services/sw/index.ts","rfm/services/api/provider.tsx","rfm/components/Shell/Footer.tsx","rfm/components/Shell/Header.tsx","rfm/components/Shell/index.tsx","rfm/services/api/github.ts","home/Search.tsx","home/List.tsx","home/index.tsx","submit/Preview.tsx","submit/SubmitButton.tsx","rfm/services/github/index.ts","submit/index.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","APIProvider","props","value","fetcher","input","init","a","fetch","response","json","children","Footer","className","aria-label","role","href","rel","target","Header","to","Shell","GITHUB_ROOT","fetcherRequestList","query","params","path","join","payload","requestList","items","map","item","body","id","comments","createdAt","Date","created_at","title","updatedAt","updated_at","url","total","total_count","safe","collection","key","property","Array","fetcherSubmitRequest","repoUrl","split","pathname","owner","name","headers","Accept","language","langmap","repo","description","fullName","full_name","license","spdx_id","openIssues","open_issues_count","stars","stargazers_count","Search","style","height","onSubmit","e","preventDefault","form","FormData","currentTarget","setQuery","get","htmlFor","placeholder","type","List","selectMessage","repoRequest","Home","useState","data","useSWR","Preview","Object","keys","SubmitButton","candidate","request","isValid","inputValue","isURL","host_whitelist","newGithubIssueUrl","JSON","stringify","labels","user","disabled","onClick","setGithubRepo","Submit","githubRepo","setInputValue","error","onChange","console","ReactDOM","render","StrictMode","basename","exact","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0e47a150.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport { SWRConfig } from 'swr'\n\nexport const APIProvider: React.FC<{}> = (props) => (\n  <SWRConfig\n    value={{\n      fetcher: async (input: RequestInfo, init?: RequestInit | undefined) => {\n        const response = await fetch(input, init)\n        return await response.json()\n      },\n    }}\n  >\n    {props.children}\n  </SWRConfig>\n)\n","import React from 'react'\n\nconst Footer: React.FC<{}> = () => {\n  return (\n    <footer className='flex flex-row justify-between w-full max-w-4xl p-4 mx-auto'>\n      <p>\n        Hand-crafted with\n        <span className='mx-1 text-red-700' aria-label='heart' role='img'>\n          ♥️\n        </span>\n        by\n        <a\n          className='ml-1 link'\n          href='https://twitter.com/sospedra_r'\n          rel='noopener noreferrer'\n          target='_blank'\n        >\n          @sospedra_r\n        </a>\n      </p>\n\n      <div className='flex flex-col items-end'>\n        <a\n          href='https://twitter.com/sospedra_r'\n          target='_blank'\n          rel='noopener noreferrer'\n          className='link'\n        >\n          Contact\n        </a>\n        <a\n          href='https://github.com/sospedra/rfm'\n          target='_blank'\n          rel='noopener noreferrer'\n          className='link'\n        >\n          Github\n        </a>\n      </div>\n    </footer>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst Header: React.FC<{}> = () => {\n  return (\n    <header className='flex flex-row justify-between w-full max-w-4xl p-4 mx-auto'>\n      <Link to='/' className='font-mono text-xl font-bold text-black'>\n        <span role='img' aria-label='construction'>\n          🚧\n        </span>{' '}\n        rfm\n      </Link>\n      <Link\n        to='/submit'\n        className='px-2 py-1 text-pink-600 border border-pink-600 rounded'\n      >\n        Submit new repo\n      </Link>\n    </header>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport Footer from './Footer'\nimport Header from './Header'\n\nconst Shell: React.FC<{}> = (props) => (\n  <div className='flex flex-col h-screen'>\n    <Header />\n    <main className='flex-grow w-full max-w-4xl p-4 mx-auto'>\n      {props.children}\n    </main>\n    <Footer />\n  </div>\n)\n\nexport default Shell\n","import langmap from 'language-map'\n\nconst GITHUB_ROOT = 'https://api.github.com'\n\nexport type Request = {\n  body: string\n  comments: number\n  createdAt: Date\n  title: string\n  id: number\n  updatedAt: Date\n  url: string\n}\n\nexport const fetcherRequestList = async (query: string = '') => {\n  const params = [\n    'repo:sospedra/rfm',\n    'state:open',\n    'label:search',\n    query,\n    'in:title,body',\n  ]\n  const path = `${GITHUB_ROOT}/search/issues?q=${params.join('+')}`\n  const response = await fetch(path)\n  const payload: {\n    items: { [key: string]: any }[]\n    total_count: number\n  } = await response.json()\n  const requestList = payload.items.map<Request>((item) => ({\n    body: item.body,\n    id: item.id,\n    comments: item.comments,\n    createdAt: new Date(item.created_at),\n    title: item.title,\n    updatedAt: new Date(item.updated_at),\n    url: item.url,\n  }))\n\n  return {\n    requestList,\n    total: payload.total_count,\n  }\n}\n\nexport type SubmitRequest = {\n  aceMode?: string\n  aliases?: string\n  color?: string\n  description: string\n  extensions?: string\n  filenames?: string\n  fullName: string\n  group?: string\n  interpreters?: string\n  language: string\n  license: string\n  name: string\n  openIssues: number\n  stars: number\n  topics?: string\n  updatedAt: string\n  url: string\n}\n\nconst safe = <T extends { [key: string]: any }>(\n  collection: T | undefined,\n  key: keyof T,\n) => {\n  if (!collection) return {}\n  let property = collection[key] as string | string[] | number\n  if (property instanceof Array) property = property.join(', ')\n  return !!property ? { [key]: property } : {}\n}\n\nexport const fetcherSubmitRequest = async (repoUrl: string) => {\n  const [_, pathname] = repoUrl.split('github.com/')\n  const [owner, name] = pathname.split('/')\n  const response: { [key: string]: any } = await fetch(\n    `${GITHUB_ROOT}/repos/${owner}/${name}`,\n    {\n      headers: {\n        Accept: 'application/vnd.github.mercy-preview+json',\n      },\n    },\n  )\n  const payload = await response.json()\n  const language = langmap[payload.language]\n  const repo: SubmitRequest = {\n    description: payload.description,\n    fullName: payload.full_name,\n    language: payload.language,\n    license: payload.license.spdx_id,\n    name: payload.name,\n    openIssues: payload.open_issues_count,\n    stars: payload.stargazers_count,\n    updatedAt: payload.updated_at,\n    url: payload.url,\n    ...safe(payload, 'topics'),\n    ...safe(language, 'filenames'),\n    ...safe(language, 'aceMode'),\n    ...safe(language, 'aliases'),\n    ...safe(language, 'color'),\n    ...safe(language, 'extensions'),\n    ...safe(language, 'group'),\n    ...safe(language, 'interpreters'),\n  }\n\n  return repo\n}\n","import React from 'react'\n\nconst Search: React.FC<{\n  setQuery: (query: string) => void\n}> = (props) => {\n  return (\n    <section\n      className='flex flex-col items-center justify-center w-full text-center md:p-8'\n      style={{ height: '50%' }}\n    >\n      <h2 className='italic'>Request for maintainers</h2>\n      <form\n        className='w-full max-w-xl mx-auto'\n        onSubmit={(e) => {\n          e.preventDefault()\n          const form = new FormData(e.currentTarget)\n          props.setQuery(form.get('search') as string)\n        }}\n      >\n        <label htmlFor='search' className='block'>\n          <h1 className='font-mono text-xl font-bold'>\n            Browse repos that need support\n          </h1>\n        </label>\n        <div className='flex flex-row my-4'>\n          <input\n            id='search'\n            name='search'\n            className='block w-full px-4 py-2 border rounded shadow-lg'\n            placeholder='Type a name, language, tag, etc.'\n          />\n          <input\n            className='px-4 py-2 ml-4 text-white bg-pink-600 rounded shadow-lg cursor-pointer hover:bg-pink-700'\n            type='submit'\n            value='Search'\n          />\n        </div>\n      </form>\n    </section>\n  )\n}\n\nexport default Search\n","import React from 'react'\nimport { Code as PlaceholderCode } from 'react-content-loader'\nimport { Request } from '../rfm/services/api/github'\n\nconst selectMessage = (total?: number) => {\n  switch (total) {\n    case 0:\n      return (\n        <p className='text-lg'>\n          There are not requests that matches your criteria{' '}\n          <span role='img' aria-label='shrug'>\n            🤷🏻‍♂️\n          </span>{' '}\n          Try another search.\n        </p>\n      )\n    case 1:\n      return (\n        <p className='text-lg'>\n          There is <b>1</b> request that needs your help{' '}\n          <span role='img' aria-label='muscle'>\n            💪\n          </span>\n        </p>\n      )\n    default:\n      return (\n        <p className='text-lg'>\n          There are <b>{total}</b> requests that need your help{' '}\n          <span role='img' aria-label='hero'>\n            🦸🏽‍♀️\n          </span>\n        </p>\n      )\n  }\n}\n\nconst List: React.FC<{\n  requestList?: Request[]\n  total?: number\n}> = (props) => {\n  if (!props.requestList) {\n    return (\n      <section className='w-full py-4 md:w-2/3'>\n        <PlaceholderCode />\n        <br />\n        <PlaceholderCode />\n      </section>\n    )\n  }\n  return (\n    <section className='w-full py-4'>\n      {selectMessage(props.total)}\n      <ul>\n        {props.requestList.map((repoRequest) => (\n          <li key={repoRequest.id}>{repoRequest.url}</li>\n        ))}\n      </ul>\n    </section>\n  )\n}\n\nexport default List\n","import React, { useState } from 'react'\nimport useSWR from 'swr'\nimport Shell from '../rfm/components/Shell'\nimport { fetcherRequestList } from '../rfm/services/api/github'\nimport Search from './Search'\nimport List from './List'\n\nconst Home: React.FC<{}> = () => {\n  const [query, setQuery] = useState(' ')\n  const { data } = useSWR(query, fetcherRequestList)\n\n  return (\n    <Shell>\n      <Search setQuery={setQuery} />\n      <List {...data} />\n    </Shell>\n  )\n}\n\nexport default Home\n","import React from 'react'\nimport { SubmitRequest } from '../rfm/services/api/github'\n\nconst Preview: React.FC<{\n  data?: SubmitRequest\n}> = (props) =>\n  props.data ? (\n    <section className='flex justify-center py-6'>\n      <div className='w-full sm:w-auto'>\n        <p className='py-4 text-lg'>\n          The repo <b>{props.data.fullName}</b> will be posted\n        </p>\n        <pre className='overflow-auto'>\n          <p>{`{`}</p>\n          {Object.keys(props.data).map((key) => (\n            <p className='pl-4' key={key}>\n              <span className='text-pink-500'>{key}</span>\n              <span className='whitespace-pre-wrap'>\n                :\n                <span className='text-gray-800'>\n                  {' '}\n                  {props.data && props.data[key as keyof SubmitRequest]}\n                </span>\n                ,\n              </span>\n            </p>\n          ))}\n          <p>{`}`}</p>\n        </pre>\n      </div>\n    </section>\n  ) : null\n\nexport default Preview\n","import React from 'react'\nimport { SubmitRequest } from '../rfm/services/api/github'\nimport { createGithubIssue, isValidGithubUrl } from '../rfm/services/github'\nimport './submit-button.css'\n\nconst SubmitButton: React.FC<{\n  data?: SubmitRequest\n  inputValue: string\n  setGithubRepo: (repo: string) => void\n}> = (props) => {\n  const isValid = isValidGithubUrl(props.inputValue)\n\n  return props.data ? (\n    <a\n      id='submit'\n      href={createGithubIssue(props.data)}\n      className='w-64 px-4 py-2 text-white bg-pink-600 rounded shadow-lg hover:bg-pink-700'\n    >\n      Submit request\n    </a>\n  ) : (\n    <button\n      disabled={!isValid}\n      className={`w-64 px-4 py-2 text-white rounded shadow-lg ${\n        isValid\n          ? 'cursor-pointer bg-pink-600 hover:bg-pink-700'\n          : 'bg-gray-500 cursor-not-allowed'\n      }`}\n      onClick={() => props.setGithubRepo(props.inputValue)}\n    >\n      Find repo\n    </button>\n  )\n}\n\nexport default SubmitButton\n","import newGithubIssueUrl from 'new-github-issue-url'\nimport isURL from 'validator/lib/isURL'\nimport { SubmitRequest } from '../api/github'\n\nexport const createGithubIssue = (request?: SubmitRequest) => {\n  if (!request) return ''\n  return newGithubIssueUrl({\n    body: JSON.stringify(request, null, 4),\n    labels: ['search'],\n    repo: 'rfm',\n    title: request.fullName,\n    user: 'sospedra',\n  })\n}\n\nexport const isValidGithubUrl = (candidate: string) => {\n  return isURL(candidate, {\n    host_whitelist: [/^.*github\\.com$/],\n  })\n}\n","import React, { useState } from 'react'\nimport useSWR from 'swr'\nimport Shell from '../rfm/components/Shell'\nimport { fetcherSubmitRequest } from '../rfm/services/api/github'\nimport Preview from './Preview'\nimport SubmitButton from './SubmitButton'\n\nconst Submit: React.FC<{}> = () => {\n  const [githubRepo, setGithubRepo] = useState('')\n  const [inputValue, setInputValue] = useState('')\n  const { data, error } = useSWR(githubRepo, fetcherSubmitRequest)\n\n  return (\n    <Shell>\n      <section className='flex flex-col items-center justify-center w-full text-center md:p-8'>\n        <label htmlFor={!!data ? 'submit' : 'githubRepo'}>\n          <h1 className='font-mono text-xl font-bold'>\n            Add a new repository that needs maintance\n          </h1>\n          <h2 className='text-lg'>Submit a github.com valid url</h2>\n        </label>\n        <div\n          className={`w-full transition transform duration-1000 ${\n            !!data ? '-translate-y-8 opacity-0' : 'translate-y-0 opacity-100'\n          }`}\n        >\n          <input\n            id='githubRepo'\n            value={inputValue}\n            onChange={(e) => setInputValue(e.currentTarget.value)}\n            placeholder='Type a github.com repository url'\n            className='w-full px-4 py-2 my-4 border rounded shadow-lg md:w-2/3'\n          />\n        </div>\n        <SubmitButton\n          inputValue={inputValue}\n          setGithubRepo={setGithubRepo}\n          data={data}\n        />\n\n        {error && (\n          <aside className='p-4 m-6 text-red-700 border border-red-700 rounded'>\n            {console.error(error)}\n            Something went wrong. Check the report details in the console.\n          </aside>\n        )}\n      </section>\n\n      <Preview data={data} />\n    </Shell>\n  )\n}\n\nexport default Submit\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { HashRouter, Route } from 'react-router-dom'\nimport * as serviceWorker from './rfm/services/sw'\nimport { APIProvider } from './rfm/services/api/provider'\nimport './tailwind.css'\nimport Home from './home'\nimport Submit from './submit'\n\nReactDOM.render(\n  <React.StrictMode>\n    <APIProvider>\n      <HashRouter basename='/'>\n        <Route exact path='/' component={Home} />\n        <Route path='/submit' component={Submit} />\n      </HashRouter>\n    </APIProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}